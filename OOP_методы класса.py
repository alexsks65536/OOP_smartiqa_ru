"""
Методы класса являются чем-то средним между обычными методами (привязаны к объекту)
 и статическими методами (привязаны только к области видимости). Как легко
 догадаться из названия, такие методы тесно связаны с классом, в котором они определены.

Обратите внимание, что такие методы могут менять состояние самого класса, что в
свою очередь отражается на ВСЕХ экземплярах данного класса. Правда при этом менять
 конкретный объект класса они не могут (этим занимаются методы экземпляра класса).

Чтобы создать метод класса, необходимо воспользоваться соответствующим декоратором
 - @classmethod. При этом в качестве первого параметра такого метода передается
 служебное слово cls, которое в отличие от self является ссылкой на сам класс
 (а не на объект). Рассмотрим пример:
"""


class Phone:
    def __init__(self, color, model, os):
        self.color = color
        self.model = model
        self.os = os

    # Метод класса
    # Принимает 1) ссылку на класс Phone и 2) цвет в качестве параметров
    # Создает специфический объект класса Phone(особенность объекта в том, что это игрушечный телефон)
    # При этом вызывается инициализатор класса Phone
    # которому в качестве аргументов мы передаем цвет и модель,
    # соответствующую созданию игрушечного телефона

    @classmethod
    def toy_phone(cls, color):
        toy_phone = cls(color, "ToyPhone", None)
        return toy_phone

    # Статический метод
    @staticmethod
    def model_hash(model):
        pass

    # Обычный метод
    def check_sim(self, mobile_operator):
        pass


my_phone = Phone("Blue", "A50", "Android_11")
print(my_phone)
print(my_phone.color)
print(my_phone.model)
print(my_phone.os)

# Создаем объект игрушечный телефон
# Обращаемся к методу класса toy_phone через имя класса и точку
my_toy_phone = Phone.toy_phone("Red")
print(my_toy_phone)
